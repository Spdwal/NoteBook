* 认识 HTML
  根据 web 页面的 HTML，浏览器可以了解到显示页面所需要的全部信息。
  web 服务器等待来自 Web 浏览器的请求，当服务器收到请求时，会查找所请求的资源，然后将资源发给浏览器。
** 标签
   浏览器通常显示的标题有 6 级，从<h1>到<h6>。字体由大到小。
   <html>标记告诉浏览器你的文档时一个 HTML 文件。
   注释写法为：<!-- -->。
   <head></head>包含 web 页面的有关信息，<title>包含页面窗口顶部的内容。
   <body>内部包含页面的主体内容。
   <p>标记一个文本块，这是一个段落，其中可以有一个或者多个句子。
   元素 ＝ 开始标记 ＋ 内容 ＋ 结束标记
   大多数空白（回车，TAB， 空格）都会被忽略。
** 属性
   元素可以有属性，通过属性，可以提供一个元素的附加信息。
   #+BEGIN_SRC HTML5
   <html>
     <head>
       <title></title>
       <style type="text/css">
         body{
         }
       </style>
     </head>
     <body>
     </body>
   </html>
   #+END_SRC
   其中 body 表示{}内的 CSS 要应用与<body></body>内。
* 深入了解超文本
** 创建一个链接
   要创造链接，需要使用<a>元素。
   #+BEGIN_SRC HTML5
   <a href="XXX/XXX">nameString</a>
   #+END_SRC
   <a>元素创建指向另一个页面的链接。
** 创建一个图片
   #+BEGIN_SRC HTML5
   <img src="xxxxx">
   #+END_SRC
   属性的写法都一样，首先是属性名，后面是一个等于号，然后是用双引号括起来的属性值。
** 文件的组织
   将各种资源放在不同的文件夹中维护，网站也会更加容易管理。
   可以利用路径来规划，具体使用类似与 linux 文件路径。
* 构建模块
  + 草图
  + 略图
  + 网页
** q 与 blockquote
   q 与 blockquote 都是引用，但是两者之间有着本质的区别，blockquote 是一个块元素，q 是一个内联元素，块元素显示时就好像前后各有一个换行，而内联元素在页面文本流中总是在行内出现。
   设计一个页面时，一般先从较大的块开始，然后在完善页面时再加入内联元素。
** br 元素
   br 元素唯一的任务就是提供一个换行符。
   它是一个没有任何内容的元素，因为它只是一个换行，并没有其它内容。
   它并不是唯一没有实际内容的元素，还有很多类似的元素，我们把它叫作 void 元素。比如 br，img。它们只需要使用一个开始标记。
** 列表
   要创建一个列表，需要将每个列表项放在单独的<li>元素中。这说明需要把内容用一个开始标记和一个结束标记包围起来。
   然后将列表项用<ol></ol>或者<ul></ul>包围起来，如果使用 ul，则这些列表项将作为一个无序列表显示，如果使用 ol，则作为无序列表显示。
   还有一种列表叫定义列表，它用 dl 包围。列表中每一项都有一个定义术语 dt 和一个定义描述 dd。
** 嵌套
   元素和元素之间可以嵌套，但是你需要时候注意标记不匹配的清况。如下：
   #+BEGIN_SRC ruby
   <p>I'm going to street<em>this</p></em>
   #+END_SRC
** 特殊字符
   > ---> &gt
   < ---> &lt
   如果希望 HTML 内容中出现一个&，则可以使用字符实体：&amp，而不是直接使用字符&。
* 链接，在 web 上发布自己的网站
  HTTP 也称为超文本传送斜议，尽管超文本通常只指 HTML 页面，但是这个斜议实际上可以用来传送图像或者 web 页面需要的其它任何文件。
  每次在地址栏中输入一个 url，浏览器就会使用 HTTP 向服务器请求相应的资源。如果服务器找到这个资源，就会把它返回给浏览器。如果服务器找不到这个资源，就会返回 404 错误。
  服务器需要绝对路径来找到你请求的文件，如果服务器没有得到绝对路径，它就不知道取哪里查找。
  单击一个相对链接时，在后台浏览器会根据这个相对路径和所单击的页面的路径创建一个绝对路径。
  如果只接收到一个网站名而没有指定路径名，则服务器会尝试查找目录中的一个默认文件，通常默认文件名为 index.html 或者 default.html。
  所以如果要从根目录默认返回一个文件，只需要将它命名为 index.html 或者 default.html。
  url 并不只是从浏览器输入，也可以在 HTML 中使用，例如在<a>中使用。
  相对路径只用来链接同一个网站内的页面，url 通常用来链接其它网站。
  :8000 是一个可以放在 HTTP URL 中的可选的端口，通常 web 上的所有东西都会传送到一个默认端口(90)，不过元素 web 服务器会配置为在另外一个不同的端口接收请求，如 9000.
  这种清况通常在测试服务器上出现，如果没有指定端口，则默认为 90.
** 特殊属性
   <a>有一个 title 属性，鼠标移动到链接上，就会显示 title 属性。
   <a>还有一个 id 属性，允许直接访问页面中的一个特定点。
   用例如下：
   #+BEGIN_SRC HTML5
   <h2 id="chai">Chai Tea </h2>
   <a href="index.html#chai">See Chai Tea</a>
   #+END_SRC
   + 找到页面中希望创建锚点的位置，可以是页面上任何文本，不过通常是标题。
   + 为目标选择一个标示符名字，标准元素的开始标记里插入一个属性。
   如果元素有多个属性，它们的顺序并不重要。
   可以为任何元素添加 title 属性。
   可以为任意元素添加 id 属性。
** target 属性
   target 会告诉浏览器页面的目标窗口，如果使用_blank 作为目标，浏览器就总是打开一个新窗口来显示页面。有些浏览器也会打开一个新标签页来打开页面。
* 认识媒体
  浏览器在看到一个 img 元素时，必须先获取这个图像。
  各种图像适和承担的任务不一样：
  JPEG：适和连续色调图片，如照片。
  PNG：适和单色图像和线条构成的图像，它会压缩图像大小，但是不会丢失信息，同时还允许将颜色设置为透明。
  GIF：也支持透明色，但是只允许将一种颜色设置为透明，GIF 文件往往比相应的 JPEG 文件大，它还支持显示动图。
** img 元素解密
   src 属性不只是用于相对链接，还可以将 src 属性中放入 URL，图像与 HTML 页面一同存储在 Web 服务器上，所以 Web 上每个图像都有自己的 URL。
   对与相同网站上的链接和图像，最好使用相对路径。
   img 一定要提供候选格式，使用 _alt_ 属性为访问者提供一些暗示，告诉它们图像里有什么信息。
   也可以给 img 的 _width_ ， _height_ 属性设定图像大小。
   #+BEGIN_SRC HTML5
   <img src="XXXXXXXX" alt="XXXXXXX" width="40" height="100">
   #+END_SRC
   也可以使用 ps 来调整图像大小。
** 图片的组织
   可以将缩略图和原图分开放置，然后为原图创建一个单独的文件夹，存储所有的单独存储这些图像的页面。
   然后要链接到图像，需要将<img>元素放在<a>元素里面嵌套。
   例如：
   #+BEGIN_SRC HTML5
   <a href="URL">
     <img src="picture url"
          alt="some message">
   </a>
   #+END_SRC
   要确保链接，缩略图，页面能正确对应。
* 标准及其它
  HTML5:之后唯一的 HTML 标准。不会再有 6,7,8 等等。它会随着技术的发展形成文档。
  HTML5:doctype
  <!doctype html>   -->   告诉浏览器我们在使用 HTML，不用再担心特定的版本号或者语言，也不用指向某个标准。
** 指定字符编码
   使用 meta 来指定字符编码。
   <meta charset="utf-8">
   meta 表示我们要告诉浏览器关于页面的一些信息。
   meta 标签放在 head 元素中，要记得 head 元素包含所有关于页面得信息。
** HTML 编写指南
   + 一定要用 doctype 开头。
   + html 元素不能缺失，它必须示 Web 页面得最顶层元素或者根元素。
   + 所有其它元素都必须放在 head 和 body 里面。
   + 在 head 里包含正确得字符编码。
   + 一定要在 head 里添加 title 元素。
   + 嵌套元素时要当心
   + 一定要记得检查属性，有些标签确少属性就几乎不能使用。
* CSS 入门
  目前我们所有得使用得 CSS 规则都会为段落定义样式。
  要为 HTML 直接添加 CSS 样式的话，要在 head 元素中添加 style 标签，然后将 CSS 规则放在里面。
  如果要为两个标签添加一样的 CSS 的话，可以连在一起写：
  h1, h2{   }
  下面列出一些常用 CSS
  font-family:  字体
  color:        颜色
  border-bottom:下边框外观
  solid:        实心
  font-weight:  文本粗细
  left:         指定元素的左边所在位置
  top:          控制元素顶部的位置
  letter-spacing:设置字母间距
  text-align:   将文本左对齐，居中，或者右对齐。
  font-style:   可以设置斜体文本
  list-style:   可以设置列表的外观
  background-image:在元素后放置一个图像
  border:       在元素周围加边框
  padding:      在元素边缘和它的内容之间有空间
** 如何引用一个 css 文件
   可以将<style></style>及其之内的元素换成<link....>
   用法如下
   <link type="text/css" rel="stylesheet" href="lounge.css">
   使用 link 元素链入外部信息，type 指定信息的类型，在 HTML5 中可以省略，rel 指定 HTML 文件与所链接的文件之间的关系，我们要链接到一个样式表，所以这里使用 stylesheet。
   样式表放在这个 href 中，可以是相对链接，也可以是一个 URL。
   元素中嵌套的元素会继承元素中的 CSS 规则。
   同时，也可以显式的为元素指定特殊的 CSS 规则。
   但是一般来说，在段落中间改变它并不是好主意。
** 创建一个类
   创建一个类有两个步骤：
   首先，为 HTML 元素增加一个 class 属性，这样就会把这个元素增加到这个类中来，其次在 CSS 中选择这个类。
   #+BEGIN_SRC HTML5
   <p class="greentea"> <p>
   #+END_SRC
   #+BEGIN_SRC CSS
   p.greentea{
     color: green
   }
   #+END_SRC
   这个类和面向对象语言中有点不一样，类名在右边，元素在左边，上面的 CSS 例子中，表示的式 greentea 类中的元素 P 的 CSS 式样。
   如果想将类内的所有元素公有一个属性，则可以这样写
   #+BEGIN_SRC HTML5
   .greentea{
   }
   #+END_SRC
   元素也可以加入多个类
   #+BEGIN_SRC HTML5
   <p class="xxxxx xxxxx xxxxx"></p>
   #+END_SRC
   如果多个选择器选择一个元素，
   首先，选择更加特定的选择器，如果有两个相同特定级别的选择器，那么使用最后列出的规则。
* 增加字体和颜色式样 
  在 css 这个，字体被划分为字体系列(font-family)，可以从中指定希望页面中各个元素使用的字体。
  text-decoration: 可以为文本加上一些装饰，包括上划线，下划线和删除线。
  font-family 可以指定多个，它们之间用逗号隔开，当指定多个的时候，从左到右依次查找，直到找到第一个计算机本身拥有的字体。
** 如果用户计算机上没有指定的字体怎么办？
   可以直接使用 web 服务器上的字体。
   字体文件使用.woff 文件名存储在服务器上，文件字体包含在 web 页面上使用这种字体的一切信息。
   将字体文件放在服务器上会得到一个 URL，然后使用方法如下：
   #+BEGIN_SRC CSS
   @font-face{
     font-family: "Emblema One";
     src: url("xxxxxxxx"),
          rul("xxxxxxxx");
   }
   #+END_SRC
   与正常的规则不同，正常规则会选择一组元素并指定样式，但是@font-face 规则会建立一个字体，将指定一个 font-family 名字，以便使用。
   在规则中，我们用 font-family 为这个字体创建一个名字，可以使用你喜欢的任何名字，不过通常最好与字体名字一致。
   src 属性告诉浏览器在哪里可以得到这个字体。对于浏览器可识别的每一个文件，都可以分别指定一个 src 值。浏览器会尝试加载每一个 src 文件，直到找到能支持它的一个文件。
   一但要在 css 中使用
   #+BEGIN_SRC CSS
   h1{
     font-family: "Emblema One", sans-serif;
   }
   #+END_SRC
** 指定字体的大小
   字体大小可以用 px 指定，即为像素指定，还可以使用 em 指定字体大小，类似与百分数，而是要指定一个比例因子，1.2em 和 120%等价。
   尽量不要使用像素大小，因为某些浏览器在调整像素大小时很麻烦。
** 字体粗细
   font-weight 可以调整字体的粗细，可以设定为 normal bold 或者是某个（1..9)*100 的数字，不过数字未得到字体和浏览器的广范支持，所以通常不使用。
** 字体风格
   可以使用 font-style 为文本增加风格，例如 oblique 得到斜体风格，
** web 颜色如何工作
   CSS 只定义了大概 150 种颜色的名字。
   可以使用指定的颜色名字，也可以使用 rgb 来指定颜色：color: rgb(80%, 40% 60%)
   也可以直接使用数字：color: rgb(204, 12, 0)
   或者直接使用十六进制码来指定颜色例如 color: #cc6600, 分别为红，绿， 蓝的颜色分量。
   文本装饰允许为文本增加一些装饰性的效果，一次可以设置多个装饰，但是只有把它们合并到同一个规则中，才会同时得到这多个装饰，如果分开写在不同的规则里，并不会得到多个装饰。
* 盒模型
  盒模型是 CSS 看待元素的一种方式，CSS 将每个元素看作由一个盒子表示。利用 CSS，可以对盒子的所有方面进行控制：内容周围内边距，元素是否有边框，元素之间的外边距。
** 加入背景图像
   使用 backgroud-imgae 后加入背景图像，默认会一直重复，可以设置是否重复，并且可以设置它的位置。
   使用：
   background-repeat: no-repeat;
   background-position: top left;
** 边框式样
   border-style 可以控制边框的可以样式，分别为
   solid: 实线
   dotted:虚线
   dashed:破折线
   double:双线
   groove:槽线
   inset: 内凹线
   outset:外凹线
   ridge: 脊线
   border-width：可以使用关键字，或者是用像素指定。
   border-color: 指定边框的颜色。
   也可以指定某一边的边框：border-top-style:
** ID
   也可以在 CSS 类中使用 ID，这里按 id 来选择元素，需要在 id 前使用一个#字符，例如：
   p#footer{
   }
** 样式表
   之所以希望有多个样式文件，实际上是想针对将要显示页面的设备类型来调整页面的样式。要作到这一点，可以利用一个 media 属性。
   <link href="lounge-mobile.css" rel="stylesheet" media="screen and (max-device-width: 480px)">
   或者可以使用媒体查询来查询设备，但是这方面的技术日新月异。
* 高级 web 建设
** div 元素
   div 元素允许将页面划分为逻辑分区和逻辑分组
   将元素嵌入到一个 div 中，就是在指示这些元素属于同一个组，然后再使用 id 属性为 div 提供唯一的一个标签。
   在页面中要使用 div，但是不可以滥用，如果这样作有助于将页面分解为逻辑区，从而保征结构清晰便于指定样式，那么可以增加，否则只会让页面变得更复杂。
   一个块元素的默认宽度是 auto，它会延伸占满可用的空间。
   text-align 会对所有的内联元素对齐。
   通过 div，我们可以实现只想选择某些元素的子孙元素，
   #elixirs h2{
   }
   便特定选择了 id 为 exixirs 的 div 元素下的子元素的 CSS。
*** 快捷写法
    #+BEGIN_SRC CSS
    padding-top:        0px;
    padding-right:      20px;
    padding-bottom:     20px;
    padding-left:       30px;
    padding: 0px 20px 20px 30px;
    #+END_SRC
    上面前 4 行与第五行等价，依次为上右下左，顺时针。
    或者也可以这样写：
    #+BEGIN_SRC CSS
    margin: 0px 20px;           #第一个参数为上和下边，第二个为左和右边。
    #+END_SRC
** span 元素
   span 元素与 div 元素相似，但是它是针对内联元素而不是快元素的。
   span 的使用方式类似与 div，可以为它添加 class 类和 id 来区分。
   class 和 id 有些地方相似，但是有些地方又不同，class 可以给多个标签使用，而 id 只能 1 对 1。
   id 还可以做到识别元素的作用。
** a 元素
   一个链接可以有多个状态，可能未访问，已访问，或者处于悬停状态。
   #+BEGIN_SRC CSS
   a:link{ color: green; }
   a:visit{ color: red; }
   a:hover{ color: yellow; }
   #+END_SRC
   注意不能有空格。
** 伪类
   伪类是 CSS 选择符的 一部分，它像一个类，但是不是真正的一个类，你可以为伪类指定样式，但是没有人会真正输入这些伪类。
   提示：在 CSS 定义中，a:hover 必须被置于 a:link 和 a:visited 之后，才是有效的。
   提示：在 CSS 定义中，a:active 必须被置于 a:hover 之后，才是有效的。
   提示：伪类名称对大小写不敏感。
   可以利用伪类单独的为各个状态指定式样。
   伪类并不是只能处理链接，伪类的样式很多。
** 层叠
   作者，用户，浏览器，都有着自己的式样表，浏览器确定要应用某个式样时，它会使用所有的式样表。
   但是优先级的是作者，读者，浏览器的顺序。
   浏览器以层叠的方式来确定具体使用哪一种式样。
   1. 收集所有的样式表。
   2. 找到匹配的声明。
   3. 现在对所有的匹配的规则排序。
   4. 按照特定性对所有的声明排序。
   5. 最后，对于冲突的规则，按照它们在各自样式表中出现的顺序进行排序。
* 布局与定位
** 流
   块元素从上向下流，内联元素在水平方向上会相互挨着，总体上会是从左上方流下右下方。
   只要右边还有空间，就会水平摆放。
   并排摆放两个内联元素时，的两个内联元素的间距是两个元素外边距只和。
   而并排摆放两个块元素时，两个块元素的外边距时两个块元素最大的外边距高度。
   float 属性尽可能远的向左或者向右浮动一个元素，然后它下面所有的元素都会绕流这个元素。
   对于所有的浮动元素，它都有一个要求，它必须有一个宽度。
   浏览器遇到浮动元素时，会把它尽可能放在最右边，还会从流中删除这个段落，就好像它浮在页面上一样。
   因为它已经从流中被删除，所以其它块元素会被填在这里，好像没有出现过一样。
   块元素都会被浮动元素覆盖，但是内联元素会考虑浮动元素的边界，所以会围绕着浮动元素。
   一般来说，不会将主内容区作为浮动，只会浮动次要内容区域。
   给其它元素加入 clear 属性，则它不会与 float 元素发生重叠。
** 冻结布局
   使用流体布局时，无论浏览器调整到多大的宽度，它都会适应，它们会填充可用空间，不过，有时候布局锁定可能更重要，这样一来，当用户调整屏幕大小时，那对使用仍然能够保持原样。
   此时将左右外边距调整成 auto，则可以在左右外边栏填充凝胶 Jello。
*** 绝对定位
    可以为元素设置位置属性，给它定位在屏幕的某个位置，可以在页面上精准的对应元素。
    此时要添加 position:absolute;并且为它指定位置。
    每个定位元素都有一个 z-index 的属性，这会指定它在 z 轴上的位置。
    如果没有设置的话，postition 为 static，静态，元素会放在正常的文档流中，由浏览器来定位。
    一个元素绝对定位时，也被从文档流中删除。
    position 属性有 4 个值，static，absolute，fixed,relative。
    fixed 是将元素放在相对于浏览器窗口的一个位置上，所以固定元素永远也不会移动。
    relative 属性会让元素正常的流入界面，但是在页面显示之前要进行偏移。
    指定位置时。除了用百分数，也可以用像素来指定。
*** 固定定位
    固定定位时距离浏览器窗口边界的一个偏移量，而不是距离页面边界的距离。
    使用 position: fixed;
** 实现表格
   1. 首先创建一个 div 表示整个表格。id 为 tableContainer，添加属性 display:table;
   2. 对表格中的每一行创建一个 div，其中包含内容,添加属性为 display: table-row;
   3. 对与每一列，只需要一个块元素作为改列的内容。display: table-cell;
* HTML5 标记
** 新增加元素
   aside             表示放在主内容旁边的内容
   progress          显示任务完成进度
   section           定义文档的主要区块
   footer            定义页脚
   header            定义页眉
   video             在页面中加入一个视频
   nav               将导航组织在一起
   meter             需要显示某个范围的度量
   audio             显示声音
   mark              突出显示某些文本
   article           标记类似行为报道或者博客
   figure            用来定义类似照片，图表甚至代码清单等独立的内容
   time              显示时间
   canvas            显示用 js 绘制的图像和动画
   浏览器会自动根据标签属性来增添某些特性。
   
   
